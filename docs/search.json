[
  {
    "objectID": "knowledge-graph.html",
    "href": "knowledge-graph.html",
    "title": "Explore the Knowledge Graph",
    "section": "",
    "text": "Our People’s Data knowledge graph is integral to Wikidata. We are adding entries to build more pluralist data structures around concepts like “drone”. Select a search term to explore a concept within the context of Wikidata.\nviewof id = text({\n  title: 'Wikidata Unique Identifier (QID)',\n  //\n  value: (\n    new URLSearchParams(location.search).get(\"id\") || \"Q127786639\"\n  ).replace(/_/g, ' '),\n  description: \"For example, AB 481 Category 1 is Q127786639 and Rifle is Q124072. Limited to 10 ingoing and outgoing edges.\",\n  submit: \"Go\"\n})\nimport {text} from \"@jashkenas/inputs\"\nwrapText = (text, len = 15) =&gt; {\n  const words = lexer(text);\n  let lines = '';\n  let count = 0;\n  for (let word of words) {\n    if (count + word.length &gt;= len) {\n      lines += `\\n${word} `;\n      count = word.length;\n    } else {\n      lines += `${word} `;\n      count += word.length;\n    }\n  }\n  return lines.trim();\n}\n// Here is the graph visualized\n\ndot`digraph \"${id}\" {\n  outputorder=edgesfirst\n  graph[rankdir=LR, center=true]\n  node[shape=none, fontname=\"Source Serif Pro\", fontsize=13]\n  edge[arrowsize=0.6, arrowhead=vee, color=gray]\n  ${nodes}\n  ${edges}\n }`\nimport {queryDispatcher} from \"@lukesmurray/wikidata-sparql-helpers\"\n\nquery = `SELECT ?parent ?parentLabel ?count\nWHERE\n{\n  {\n    SELECT ?parent (COUNT(?child) AS ?count)\n    WHERE\n    {\n      ?parent wdt:P40 ?child.\n    }\n    GROUP BY ?parent\n    ORDER BY DESC(?count)\n    LIMIT 10\n  }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\nORDER BY DESC(?count)\nLIMIT 10`\n\n\nnodes = picturein.map(i =&gt; `\"${wrapText(i.valueLabel)}\" [URL=\"?id=${i.value.split(\"/\")[i.value.split(\"/\").length-1]}\", fontcolor=\"#3182bd\", target=\"_top\"]`).concat(pictureout.map(i =&gt; `\"${wrapText(i.valueLabel)}\" [URL=\"?id=${i.value.split(\"/\")[i.value.split(\"/\").length-1]}\", fontcolor=\"#3182bd\", target=\"_top\"]`)).join(\"\\n\")\n\nedges = Array.from(new Set(picturein.map(i =&gt; `\"${wrapText(i.valueLabel)}\" -&gt; \"${wrapText(i.itemLabel)}\" [label=\"${wrapText(i.edgeLabel)}\"]`).concat(pictureout.map(i =&gt; `\"${wrapText(i.itemLabel)}\" -&gt; \"${wrapText(i.valueLabel)}\" [label=\"${wrapText(i.edgeLabel)}\"]`)))).join(\"\\n\")\n\n\ngraphqueryout = `SELECT ?item ?itemLabel ?itemImage ?value ?valueLabel ?valueImage ?edgeLabel WHERE {\n  {BIND(wd:${id} AS ?item)\n  ?item ?wdt ?value.\n  ?edge a wikibase:Property;\n        wikibase:propertyType wikibase:WikibaseItem; # note: to show all statements, removing this is not enough, the graph view only shows entities\n        wikibase:directClaim ?wdt.\n  OPTIONAL { ?item wdt:P18 ?itemImage. }\n  OPTIONAL { ?value wdt:P18 ?valueImage. }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\".}}\n}\nLIMIT 10`\n\ngraphqueryin = `SELECT ?item ?itemLabel ?itemImage ?value ?valueLabel ?valueImage ?edgeLabel WHERE {\n  {BIND(wd:${id} AS ?item)\n  ?value ?wdt ?item.\n  ?edge a wikibase:Property;\n        wikibase:propertyType wikibase:WikibaseItem; # note: to show all statements, removing this is not enough, the graph view only shows entities\n        wikibase:directClaim ?wdt.\n  OPTIONAL { ?item wdt:P18 ?itemImage. }\n  OPTIONAL { ?value wdt:P18 ?valueImage. }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\".}}\n}\nLIMIT 10`\n\npictureout = queryDispatcher.query(graphqueryout)\n\npicturein = queryDispatcher.query(graphqueryin)\n\npicturein.map(i =&gt; `\"${wrapText(i.itemLabel)}\" -&gt; \"${wrapText(i.valueLabel)}\"`).join(\"\\n\")"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "People’s Data",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nDeveloping a pluralist graph data structure\n\n\n \n\n\n\n\nExplore the Knowledge Graph\n\n\n \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "schema.html",
    "href": "schema.html",
    "title": "Developing a pluralist graph data structure",
    "section": "",
    "text": "Data structures help us to find information within an otherwise undifferentiated swamp. But data structures are not neutral. They involve decision-making and they are constrained by those decisions. [put here text about why wikidata]\n\nWorking within the constraints of Wikidata\nWhile Wikipedia allows for long narrative description of concepts, Wikidata is designed as a graph structure of nodes and links between nodes that can be explored quickly and easiy. Deriving properties from descriptions is a reductive process; important information and context is lost. To build a pluralist data structure, we sought a method for arriving at concise properties and values from long descriptions.\nFor military equipment, ‘description’ can mean something very different depending on the source. They can range from functional categorization to marketing rhetoric meant to pursuade and entice buyers. That makes it difficult to draw comparisons. The approach outlined below takes us from rich description to properties that are more easily understood in relation to each other and their context. Businesses focus on technological\n\n\nFrom a single description to multiple perspectives\nThe most visible and available descriptions of military equipment come from the businesses that market the equipment for sale. We gather additional descriptions from these other sources: legal (government legislation), enforcement (police and other government agencies), civic (organizations and community groups), and individual (direct personal experience).\n\n\n\n\n\n\n\n\n\n\nbusiness\nLegal\nenforcement\ncivic\nindividual\n\n\n\n\nmultiple\none to many\nmultiple\nmultiple\nmultiple\n\n\ncapabilities\ncategory\nuse\neffects\nexperience\n\n\n\n\n\nMultiple perspectives to arrive at properties for the concept “drone”\nWhen we began this project, most drone entries in Wikidata were for specific models made by manufacturers. We connect those different models to a general class, “Miniature Unmanned Aerial Vehicle” (alias “drone”). We then connect “drone” to California legislation AB481 Category 1 of which drone is a subclass. We connect California law enforcement agencies that use drones both to the class “drone” and to the specific model of drone when we have that information.\n\n\n\n\n\n\n\nschema\n\n\n\ndrone\n\ndrone\n\n\n\nLEGAL\n\nLEGAL\n\n\n\nLEGAL-&gt;drone\n\n\nCat 1\n\n\n\nrobot\n\nrobot\n\n\n\nLEGAL-&gt;robot\n\n\nCat 1\n\n\n\nBUSINESS\n\nBUSINESS\n\n\n\nBUSINESS-&gt;drone\n\n\nheat sensitive\n\n\n\nBUSINESS-&gt;drone\n\n\nhigh-res camera\n\n\n\nENFORCEMENT\n\nENFORCEMENT\n\n\n\nENFORCEMENT-&gt;drone\n\n\nsurveillance\n\n\n\nENFORCEMENT-&gt;drone\n\n\ncommunication\n\n\n\nINDIVIDUAL\n\nINDIVIDUAL\n\n\n\nINDIVIDUAL-&gt;drone\n\n\nchilling\n\n\n\nINDIVIDUAL-&gt;drone\n\n\nintimidating\n\n\n\nCIVIC\n\nCIVIC\n\n\n\nCIVIC-&gt;drone\n\n\nprivacy\n\n\n\nCIVIC-&gt;drone\n\n\nmental health"
  },
  {
    "objectID": "schema.html#multiple-perspectives-to-arrive-at-properties-for-the-concept-drone",
    "href": "schema.html#multiple-perspectives-to-arrive-at-properties-for-the-concept-drone",
    "title": "Developing a Schema",
    "section": "Multiple perspectives to arrive at properties for the concept “drone”",
    "text": "Multiple perspectives to arrive at properties for the concept “drone”\nWhen we began this project, most drone entries in Wikidata were for specific models made by manufacturers. We connect those different models to a general class, “Miniature Unmanned Aerial Vehicle” (alias “drone”). We then connect “drone” to California legislation AB481 Category 1 of which drone is a subclass. We connect California law enforcement agencies that use drones both to the class “drone” and to the specific model of drone when we have that information.\n\n\n\n\n\n\n\nschema\n\n\n\ndrone\n\ndrone\n\n\n\nLEGAL\n\nLEGAL\n\n\n\nLEGAL-&gt;drone\n\n\nCat 1\n\n\n\nrobot\n\nrobot\n\n\n\nLEGAL-&gt;robot\n\n\nCat 1\n\n\n\nMANUFACTURER\n\nMANUFACTURER\n\n\n\nMANUFACTURER-&gt;drone\n\n\nheat sensitive\n\n\n\nMANUFACTURER-&gt;drone\n\n\nhigh-res camera\n\n\n\nENFORCEMENT\n\nENFORCEMENT\n\n\n\nENFORCEMENT-&gt;drone\n\n\nsurveillance\n\n\n\nENFORCEMENT-&gt;drone\n\n\ncommunication\n\n\n\nINDIVIDUAL\n\nINDIVIDUAL\n\n\n\nINDIVIDUAL-&gt;drone\n\n\nchilling\n\n\n\nINDIVIDUAL-&gt;drone\n\n\nintimidating\n\n\n\nCIVIC\n\nCIVIC\n\n\n\nCIVIC-&gt;drone\n\n\nprivacy\n\n\n\nCIVIC-&gt;drone\n\n\nmental health"
  },
  {
    "objectID": "knowledge-graph.html#references",
    "href": "knowledge-graph.html#references",
    "title": "Explore the Knowledge Graph",
    "section": "References:",
    "text": "References:\n\n{\n  const refs = [\n    '@mbostock/working-with-wikipedia-data',\n    '@mbostock/graphviz',\n    '@observablehq/how-observable-runs',\n    '@observablehq/notebook-visualizer',\n    '@chriszs/wikipedia-concept-graph'\n  ];\n\n  return md`refs: ${refs.map(d =&gt; `[${d}](/${d})`).join(', ')}`;\n}"
  }
]